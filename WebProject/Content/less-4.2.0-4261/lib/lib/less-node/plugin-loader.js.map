{"version":3,"file":"plugin-loader.js","sourceRoot":"","sources":["../../less-node/plugin-loader.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\r\nvar abstract_plugin_loader_js_1 = tslib_1.__importDefault(require(\"../less/environment/abstract-plugin-loader.js\"));\r\n/**\r\n * Node Plugin Loader\r\n */\r\nvar PluginLoader = function (less) {\r\n    this.less = less;\r\n    this.require = function (prefix) {\r\n        prefix = path_1.default.dirname(prefix);\r\n        return function (id) {\r\n            var str = id.substr(0, 2);\r\n            if (str === '..' || str === './') {\r\n                return require(path_1.default.join(prefix, id));\r\n            }\r\n            else {\r\n                return require(id);\r\n            }\r\n        };\r\n    };\r\n};\r\nPluginLoader.prototype = Object.assign(new abstract_plugin_loader_js_1.default(), {\r\n    loadPlugin: function (filename, basePath, context, environment, fileManager) {\r\n        var prefix = filename.slice(0, 1);\r\n        var explicit = prefix === '.' || prefix === '/' || filename.slice(-3).toLowerCase() === '.js';\r\n        if (!explicit) {\r\n            context.prefixes = ['less-plugin-', ''];\r\n        }\r\n        if (context.syncImport) {\r\n            return fileManager.loadFileSync(filename, basePath, context, environment);\r\n        }\r\n        return new Promise(function (fulfill, reject) {\r\n            fileManager.loadFile(filename, basePath, context, environment).then(function (data) {\r\n                try {\r\n                    fulfill(data);\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                    reject(e);\r\n                }\r\n            }).catch(function (err) {\r\n                reject(err);\r\n            });\r\n        });\r\n    },\r\n    loadPluginSync: function (filename, basePath, context, environment, fileManager) {\r\n        context.syncImport = true;\r\n        return this.loadPlugin(filename, basePath, context, environment, fileManager);\r\n    }\r\n});\r\nexports.default = PluginLoader;\r\n//# sourceMappingURL=plugin-loader.js.map"]}