{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../less/parse.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar contexts_1 = tslib_1.__importDefault(require(\"./contexts\"));\r\nvar parser_1 = tslib_1.__importDefault(require(\"./parser/parser\"));\r\nvar plugin_manager_1 = tslib_1.__importDefault(require(\"./plugin-manager\"));\r\nvar less_error_1 = tslib_1.__importDefault(require(\"./less-error\"));\r\nvar utils = tslib_1.__importStar(require(\"./utils\"));\r\nfunction default_1(environment, ParseTree, ImportManager) {\r\n    var parse = function (input, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = utils.copyOptions(this.options, {});\r\n        }\r\n        else {\r\n            options = utils.copyOptions(this.options, options || {});\r\n        }\r\n        if (!callback) {\r\n            var self_1 = this;\r\n            return new Promise(function (resolve, reject) {\r\n                parse.call(self_1, input, options, function (err, output) {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        resolve(output);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            var context_1;\r\n            var rootFileInfo = void 0;\r\n            var pluginManager_1 = new plugin_manager_1.default(this, !options.reUsePluginManager);\r\n            options.pluginManager = pluginManager_1;\r\n            context_1 = new contexts_1.default.Parse(options);\r\n            if (options.rootFileInfo) {\r\n                rootFileInfo = options.rootFileInfo;\r\n            }\r\n            else {\r\n                var filename = options.filename || 'input';\r\n                var entryPath = filename.replace(/[^/\\\\]*$/, '');\r\n                rootFileInfo = {\r\n                    filename: filename,\r\n                    rewriteUrls: context_1.rewriteUrls,\r\n                    rootpath: context_1.rootpath || '',\r\n                    currentDirectory: entryPath,\r\n                    entryPath: entryPath,\r\n                    rootFilename: filename\r\n                };\r\n                // add in a missing trailing slash\r\n                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\r\n                    rootFileInfo.rootpath += '/';\r\n                }\r\n            }\r\n            var imports_1 = new ImportManager(this, context_1, rootFileInfo);\r\n            this.importManager = imports_1;\r\n            // TODO: allow the plugins to be just a list of paths or names\r\n            // Do an async plugin queue like lessc\r\n            if (options.plugins) {\r\n                options.plugins.forEach(function (plugin) {\r\n                    var evalResult, contents;\r\n                    if (plugin.fileContent) {\r\n                        contents = plugin.fileContent.replace(/^\\uFEFF/, '');\r\n                        evalResult = pluginManager_1.Loader.evalPlugin(contents, context_1, imports_1, plugin.options, plugin.filename);\r\n                        if (evalResult instanceof less_error_1.default) {\r\n                            return callback(evalResult);\r\n                        }\r\n                    }\r\n                    else {\r\n                        pluginManager_1.addPlugin(plugin);\r\n                    }\r\n                });\r\n            }\r\n            new parser_1.default(context_1, imports_1, rootFileInfo)\r\n                .parse(input, function (e, root) {\r\n                if (e) {\r\n                    return callback(e);\r\n                }\r\n                callback(null, root, imports_1, options);\r\n            }, options);\r\n        }\r\n    };\r\n    return parse;\r\n}\r\nexports.default = default_1;\r\n//# sourceMappingURL=parse.js.map"]}