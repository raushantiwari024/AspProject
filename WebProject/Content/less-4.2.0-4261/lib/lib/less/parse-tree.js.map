{"version":3,"file":"parse-tree.js","sourceRoot":"","sources":["../../less/parse-tree.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar less_error_1 = tslib_1.__importDefault(require(\"./less-error\"));\r\nvar transform_tree_1 = tslib_1.__importDefault(require(\"./transform-tree\"));\r\nvar logger_1 = tslib_1.__importDefault(require(\"./logger\"));\r\nfunction default_1(SourceMapBuilder) {\r\n    var ParseTree = /** @class */ (function () {\r\n        function ParseTree(root, imports) {\r\n            this.root = root;\r\n            this.imports = imports;\r\n        }\r\n        ParseTree.prototype.toCSS = function (options) {\r\n            var evaldRoot;\r\n            var result = {};\r\n            var sourceMapBuilder;\r\n            try {\r\n                evaldRoot = (0, transform_tree_1.default)(this.root, options);\r\n            }\r\n            catch (e) {\r\n                throw new less_error_1.default(e, this.imports);\r\n            }\r\n            try {\r\n                var compress = Boolean(options.compress);\r\n                if (compress) {\r\n                    logger_1.default.warn('The compress option has been deprecated. ' +\r\n                        'We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\r\n                }\r\n                var toCSSOptions = {\r\n                    compress: compress,\r\n                    dumpLineNumbers: options.dumpLineNumbers,\r\n                    strictUnits: Boolean(options.strictUnits),\r\n                    numPrecision: 8\r\n                };\r\n                if (options.sourceMap) {\r\n                    sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\r\n                    result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\r\n                }\r\n                else {\r\n                    result.css = evaldRoot.toCSS(toCSSOptions);\r\n                }\r\n            }\r\n            catch (e) {\r\n                throw new less_error_1.default(e, this.imports);\r\n            }\r\n            if (options.pluginManager) {\r\n                var postProcessors = options.pluginManager.getPostProcessors();\r\n                for (var i = 0; i < postProcessors.length; i++) {\r\n                    result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options: options, imports: this.imports });\r\n                }\r\n            }\r\n            if (options.sourceMap) {\r\n                result.map = sourceMapBuilder.getExternalSourceMap();\r\n            }\r\n            result.imports = [];\r\n            for (var file in this.imports.files) {\r\n                if (Object.prototype.hasOwnProperty.call(this.imports.files, file) && file !== this.imports.rootFilename) {\r\n                    result.imports.push(file);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        return ParseTree;\r\n    }());\r\n    return ParseTree;\r\n}\r\nexports.default = default_1;\r\n//# sourceMappingURL=parse-tree.js.map"]}