{"version":3,"file":"svg.js","sourceRoot":"","sources":["../../../less/functions/svg.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/B,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;AACxE,IAAI,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;AAChE,IAAI,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAC1E,IAAI,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAClE,IAAI,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;AAC5D,OAAO,CAAC,OAAO,GAAG,CAAC;IACf,OAAO,EAAE,cAAc,EAAE,UAAU,SAAS;YACpC,IAAI,KAAK,CAAC;YACV,IAAI,oBAAoB,CAAC;YACzB,IAAI,YAAY,GAAG,QAAQ,CAAC;YAC5B,IAAI,kBAAkB,GAAG,kCAAkC,CAAC;YAC5D,IAAI,SAAS,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;YACpC,IAAI,QAAQ,CAAC;YACb,IAAI,cAAc,GAAG,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAChD,IAAI,CAAC,CAAC;YACN,IAAI,KAAK,CAAC;YACV,IAAI,QAAQ,CAAC;YACb,IAAI,aAAa,CAAC;YAClB,IAAI,KAAK,CAAC;YACV,SAAS,uBAAuB;gBAC5B,MAAM,EAAE,IAAI,EAAE,UAAU;oBACpB,OAAO,EAAE,qFAAqF;wBAC1F,oDAAoD,EAAE,CAAC;YACnE,CAAC;YACD,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;gBACxB,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAChC,uBAAuB,EAAE,CAAC;gBAC9B,CAAC;gBACD,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAC/B,CAAC;iBACI,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5B,uBAAuB,EAAE,CAAC;YAC9B,CAAC;iBACI,CAAC;gBACF,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACrD,CAAC;YACD,QAAQ,cAAc,EAAE,CAAC;gBACrB,KAAK,WAAW;oBACZ,oBAAoB,GAAG,mCAAmC,CAAC;oBAC3D,MAAM;gBACV,KAAK,UAAU;oBACX,oBAAoB,GAAG,mCAAmC,CAAC;oBAC3D,MAAM;gBACV,KAAK,iBAAiB;oBAClB,oBAAoB,GAAG,qCAAqC,CAAC;oBAC7D,MAAM;gBACV,KAAK,cAAc;oBACf,oBAAoB,GAAG,qCAAqC,CAAC;oBAC7D,MAAM;gBACV,KAAK,SAAS,CAAC;gBACf,KAAK,mBAAmB;oBACpB,YAAY,GAAG,QAAQ,CAAC;oBACxB,oBAAoB,GAAG,2BAA2B,CAAC;oBACnD,kBAAkB,GAAG,0CAA0C,CAAC;oBAChE,MAAM;gBACV;oBACI,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,6DAA6D;4BACxF,iEAAiE,EAAE,CAAC;YACpF,CAAC;YACD,QAAQ,GAAG,iEAAiE,CAAC,MAAM,CAAC,YAAY,EAAE,oBAAoB,CAAC,CAAC,MAAM,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;YAC1J,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;gBACnC,IAAI,KAAK,CAAC,CAAC,CAAC,YAAY,YAAY,CAAC,OAAO,EAAE,CAAC;oBAC3C,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC1B,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjC,CAAC;qBACI,CAAC;oBACF,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACjB,QAAQ,GAAG,SAAS,CAAC;gBACzB,CAAC;gBACD,IAAI,CAAC,CAAC,KAAK,YAAY,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,MAAM,CAAC,IAAI,QAAQ,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,YAAY,WAAW,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;oBAC1J,uBAAuB,EAAE,CAAC;gBAC9B,CAAC;gBACD,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;gBAC/E,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;gBACpB,QAAQ,IAAI,iBAAiB,CAAC,MAAM,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAC9K,CAAC;YACD,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,4BAA4B,CAAC,CAAC;YAClH,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YACxC,QAAQ,GAAG,qBAAqB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClD,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACnK,CAAC,EAAE,CAAC;AACZ,CAAC,CAAC,CAAC","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar dimension_1 = tslib_1.__importDefault(require(\"../tree/dimension\"));\r\nvar color_1 = tslib_1.__importDefault(require(\"../tree/color\"));\r\nvar expression_1 = tslib_1.__importDefault(require(\"../tree/expression\"));\r\nvar quoted_1 = tslib_1.__importDefault(require(\"../tree/quoted\"));\r\nvar url_1 = tslib_1.__importDefault(require(\"../tree/url\"));\r\nexports.default = (function () {\r\n    return { 'svg-gradient': function (direction) {\r\n            var stops;\r\n            var gradientDirectionSvg;\r\n            var gradientType = 'linear';\r\n            var rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"';\r\n            var renderEnv = { compress: false };\r\n            var returner;\r\n            var directionValue = direction.toCSS(renderEnv);\r\n            var i;\r\n            var color;\r\n            var position;\r\n            var positionValue;\r\n            var alpha;\r\n            function throwArgumentDescriptor() {\r\n                throw { type: 'Argument',\r\n                    message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\r\n                        ' end_color [end_position] or direction, color list' };\r\n            }\r\n            if (arguments.length == 2) {\r\n                if (arguments[1].value.length < 2) {\r\n                    throwArgumentDescriptor();\r\n                }\r\n                stops = arguments[1].value;\r\n            }\r\n            else if (arguments.length < 3) {\r\n                throwArgumentDescriptor();\r\n            }\r\n            else {\r\n                stops = Array.prototype.slice.call(arguments, 1);\r\n            }\r\n            switch (directionValue) {\r\n                case 'to bottom':\r\n                    gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\r\n                    break;\r\n                case 'to right':\r\n                    gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\r\n                    break;\r\n                case 'to bottom right':\r\n                    gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\r\n                    break;\r\n                case 'to top right':\r\n                    gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\r\n                    break;\r\n                case 'ellipse':\r\n                case 'ellipse at center':\r\n                    gradientType = 'radial';\r\n                    gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\r\n                    rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\r\n                    break;\r\n                default:\r\n                    throw { type: 'Argument', message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' +\r\n                            ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\'' };\r\n            }\r\n            returner = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 1 1\\\"><\".concat(gradientType, \"Gradient id=\\\"g\\\" \").concat(gradientDirectionSvg, \">\");\r\n            for (i = 0; i < stops.length; i += 1) {\r\n                if (stops[i] instanceof expression_1.default) {\r\n                    color = stops[i].value[0];\r\n                    position = stops[i].value[1];\r\n                }\r\n                else {\r\n                    color = stops[i];\r\n                    position = undefined;\r\n                }\r\n                if (!(color instanceof color_1.default) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof dimension_1.default))) {\r\n                    throwArgumentDescriptor();\r\n                }\r\n                positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\r\n                alpha = color.alpha;\r\n                returner += \"<stop offset=\\\"\".concat(positionValue, \"\\\" stop-color=\\\"\").concat(color.toRGB(), \"\\\"\").concat(alpha < 1 ? \" stop-opacity=\\\"\".concat(alpha, \"\\\"\") : '', \"/>\");\r\n            }\r\n            returner += \"</\".concat(gradientType, \"Gradient><rect \").concat(rectangleDimension, \" fill=\\\"url(#g)\\\" /></svg>\");\r\n            returner = encodeURIComponent(returner);\r\n            returner = \"data:image/svg+xml,\".concat(returner);\r\n            return new url_1.default(new quoted_1.default(\"'\".concat(returner, \"'\"), returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\r\n        } };\r\n});\r\n//# sourceMappingURL=svg.js.map"]}