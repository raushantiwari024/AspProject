{"version":3,"file":"chunker.js","sourceRoot":"","sources":["../../../less/parser/chunker.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Split the input into chunks.\r\nfunction default_1(input, fail) {\r\n    var len = input.length;\r\n    var level = 0;\r\n    var parenLevel = 0;\r\n    var lastOpening;\r\n    var lastOpeningParen;\r\n    var lastMultiComment;\r\n    var lastMultiCommentEndBrace;\r\n    var chunks = [];\r\n    var emitFrom = 0;\r\n    var chunkerCurrentIndex;\r\n    var currentChunkStartIndex;\r\n    var cc;\r\n    var cc2;\r\n    var matched;\r\n    function emitChunk(force) {\r\n        var len = chunkerCurrentIndex - emitFrom;\r\n        if (((len < 512) && !force) || !len) {\r\n            return;\r\n        }\r\n        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\r\n        emitFrom = chunkerCurrentIndex + 1;\r\n    }\r\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\r\n        cc = input.charCodeAt(chunkerCurrentIndex);\r\n        if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\r\n            // a-z or whitespace\r\n            continue;\r\n        }\r\n        switch (cc) {\r\n            case 40: // (\r\n                parenLevel++;\r\n                lastOpeningParen = chunkerCurrentIndex;\r\n                continue;\r\n            case 41: // )\r\n                if (--parenLevel < 0) {\r\n                    return fail('missing opening `(`', chunkerCurrentIndex);\r\n                }\r\n                continue;\r\n            case 59: // ;\r\n                if (!parenLevel) {\r\n                    emitChunk();\r\n                }\r\n                continue;\r\n            case 123: // {\r\n                level++;\r\n                lastOpening = chunkerCurrentIndex;\r\n                continue;\r\n            case 125: // }\r\n                if (--level < 0) {\r\n                    return fail('missing opening `{`', chunkerCurrentIndex);\r\n                }\r\n                if (!level && !parenLevel) {\r\n                    emitChunk();\r\n                }\r\n                continue;\r\n            case 92: // \\\r\n                if (chunkerCurrentIndex < len - 1) {\r\n                    chunkerCurrentIndex++;\r\n                    continue;\r\n                }\r\n                return fail('unescaped `\\\\`', chunkerCurrentIndex);\r\n            case 34:\r\n            case 39:\r\n            case 96: // \", ' and `\r\n                matched = 0;\r\n                currentChunkStartIndex = chunkerCurrentIndex;\r\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\r\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\r\n                    if (cc2 > 96) {\r\n                        continue;\r\n                    }\r\n                    if (cc2 == cc) {\r\n                        matched = 1;\r\n                        break;\r\n                    }\r\n                    if (cc2 == 92) { // \\\r\n                        if (chunkerCurrentIndex == len - 1) {\r\n                            return fail('unescaped `\\\\`', chunkerCurrentIndex);\r\n                        }\r\n                        chunkerCurrentIndex++;\r\n                    }\r\n                }\r\n                if (matched) {\r\n                    continue;\r\n                }\r\n                return fail(\"unmatched `\".concat(String.fromCharCode(cc), \"`\"), currentChunkStartIndex);\r\n            case 47: // /, check for comment\r\n                if (parenLevel || (chunkerCurrentIndex == len - 1)) {\r\n                    continue;\r\n                }\r\n                cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\r\n                if (cc2 == 47) {\r\n                    // //, find lnfeed\r\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\r\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\r\n                        if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else if (cc2 == 42) {\r\n                    // /*, find */\r\n                    lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\r\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\r\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\r\n                        if (cc2 == 125) {\r\n                            lastMultiCommentEndBrace = chunkerCurrentIndex;\r\n                        }\r\n                        if (cc2 != 42) {\r\n                            continue;\r\n                        }\r\n                        if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (chunkerCurrentIndex == len - 1) {\r\n                        return fail('missing closing `*/`', currentChunkStartIndex);\r\n                    }\r\n                    chunkerCurrentIndex++;\r\n                }\r\n                continue;\r\n            case 42: // *, check for unmatched */\r\n                if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\r\n                    return fail('unmatched `/*`', chunkerCurrentIndex);\r\n                }\r\n                continue;\r\n        }\r\n    }\r\n    if (level !== 0) {\r\n        if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\r\n            return fail('missing closing `}` or `*/`', lastOpening);\r\n        }\r\n        else {\r\n            return fail('missing closing `}`', lastOpening);\r\n        }\r\n    }\r\n    else if (parenLevel !== 0) {\r\n        return fail('missing closing `)`', lastOpeningParen);\r\n    }\r\n    emitChunk(true);\r\n    return chunks;\r\n}\r\nexports.default = default_1;\r\n//# sourceMappingURL=chunker.js.map"]}