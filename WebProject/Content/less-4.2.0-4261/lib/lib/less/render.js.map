{"version":3,"file":"render.js","sourceRoot":"","sources":["../../less/render.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;AACrD,SAAS,SAAS,CAAC,WAAW,EAAE,SAAS;IACrC,IAAI,MAAM,GAAG,UAAU,KAAK,EAAE,OAAO,EAAE,QAAQ;QAC3C,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE,CAAC;YAChC,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC;aACI,CAAC;YACF,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;QAC7D,CAAC;QACD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,OAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM;gBACxC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,GAAG,EAAE,MAAM;oBACrD,IAAI,GAAG,EAAE,CAAC;wBACN,MAAM,CAAC,GAAG,CAAC,CAAC;oBAChB,CAAC;yBACI,CAAC;wBACF,OAAO,CAAC,MAAM,CAAC,CAAC;oBACpB,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;aACI,CAAC;YACF,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO;gBAC5D,IAAI,GAAG,EAAE,CAAC;oBACN,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACzB,CAAC;gBACD,IAAI,MAAM,CAAC;gBACX,IAAI,CAAC;oBACD,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;oBAC7C,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACtC,CAAC;gBACD,OAAO,GAAG,EAAE,CAAC;oBACT,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACzB,CAAC;gBACD,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC,CAAC;IACF,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar utils = tslib_1.__importStar(require(\"./utils\"));\r\nfunction default_1(environment, ParseTree) {\r\n    var render = function (input, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = utils.copyOptions(this.options, {});\r\n        }\r\n        else {\r\n            options = utils.copyOptions(this.options, options || {});\r\n        }\r\n        if (!callback) {\r\n            var self_1 = this;\r\n            return new Promise(function (resolve, reject) {\r\n                render.call(self_1, input, options, function (err, output) {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        resolve(output);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            this.parse(input, options, function (err, root, imports, options) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                var result;\r\n                try {\r\n                    var parseTree = new ParseTree(root, imports);\r\n                    result = parseTree.toCSS(options);\r\n                }\r\n                catch (err) {\r\n                    return callback(err);\r\n                }\r\n                callback(null, result);\r\n            });\r\n        }\r\n    };\r\n    return render;\r\n}\r\nexports.default = default_1;\r\n//# sourceMappingURL=render.js.map"]}