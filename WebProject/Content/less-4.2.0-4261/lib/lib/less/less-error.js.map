{"version":3,"file":"less-error.js","sourceRoot":"","sources":["../../less/less-error.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar utils = tslib_1.__importStar(require(\"./utils\"));\r\nvar anonymousFunc = /(<anonymous>|Function):(\\d+):(\\d+)/;\r\n/**\r\n * This is a centralized class of any error that could be thrown internally (mostly by the parser).\r\n * Besides standard .message it keeps some additional data like a path to the file where the error\r\n * occurred along with line and column numbers.\r\n *\r\n * @class\r\n * @extends Error\r\n * @type {module.LessError}\r\n *\r\n * @prop {string} type\r\n * @prop {string} filename\r\n * @prop {number} index\r\n * @prop {number} line\r\n * @prop {number} column\r\n * @prop {number} callLine\r\n * @prop {number} callExtract\r\n * @prop {string[]} extract\r\n *\r\n * @param {Object} e              - An error object to wrap around or just a descriptive object\r\n * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\r\n * @param {string} [currentFilename]\r\n */\r\nvar LessError = function (e, fileContentMap, currentFilename) {\r\n    Error.call(this);\r\n    var filename = e.filename || currentFilename;\r\n    this.message = e.message;\r\n    this.stack = e.stack;\r\n    if (fileContentMap && filename) {\r\n        var input = fileContentMap.contents[filename];\r\n        var loc = utils.getLocation(e.index, input);\r\n        var line = loc.line;\r\n        var col = loc.column;\r\n        var callLine = e.call && utils.getLocation(e.call, input).line;\r\n        var lines = input ? input.split('\\n') : '';\r\n        this.type = e.type || 'Syntax';\r\n        this.filename = filename;\r\n        this.index = e.index;\r\n        this.line = typeof line === 'number' ? line + 1 : null;\r\n        this.column = col;\r\n        if (!this.line && this.stack) {\r\n            var found = this.stack.match(anonymousFunc);\r\n            /**\r\n             * We have to figure out how this environment stringifies anonymous functions\r\n             * so we can correctly map plugin errors.\r\n             *\r\n             * Note, in Node 8, the output of anonymous funcs varied based on parameters\r\n             * being present or not, so we inject dummy params.\r\n             */\r\n            var func = new Function('a', 'throw new Error()');\r\n            var lineAdjust = 0;\r\n            try {\r\n                func();\r\n            }\r\n            catch (e) {\r\n                var match = e.stack.match(anonymousFunc);\r\n                lineAdjust = 1 - parseInt(match[2]);\r\n            }\r\n            if (found) {\r\n                if (found[2]) {\r\n                    this.line = parseInt(found[2]) + lineAdjust;\r\n                }\r\n                if (found[3]) {\r\n                    this.column = parseInt(found[3]);\r\n                }\r\n            }\r\n        }\r\n        this.callLine = callLine + 1;\r\n        this.callExtract = lines[callLine];\r\n        this.extract = [\r\n            lines[this.line - 2],\r\n            lines[this.line - 1],\r\n            lines[this.line]\r\n        ];\r\n    }\r\n};\r\nif (typeof Object.create === 'undefined') {\r\n    var F = function () { };\r\n    F.prototype = Error.prototype;\r\n    LessError.prototype = new F();\r\n}\r\nelse {\r\n    LessError.prototype = Object.create(Error.prototype);\r\n}\r\nLessError.prototype.constructor = LessError;\r\n/**\r\n * An overridden version of the default Object.prototype.toString\r\n * which uses additional information to create a helpful message.\r\n *\r\n * @param {Object} options\r\n * @returns {string}\r\n */\r\nLessError.prototype.toString = function (options) {\r\n    options = options || {};\r\n    var message = '';\r\n    var extract = this.extract || [];\r\n    var error = [];\r\n    var stylize = function (str) { return str; };\r\n    if (options.stylize) {\r\n        var type = typeof options.stylize;\r\n        if (type !== 'function') {\r\n            throw Error(\"options.stylize should be a function, got a \".concat(type, \"!\"));\r\n        }\r\n        stylize = options.stylize;\r\n    }\r\n    if (this.line !== null) {\r\n        if (typeof extract[0] === 'string') {\r\n            error.push(stylize(\"\".concat(this.line - 1, \" \").concat(extract[0]), 'grey'));\r\n        }\r\n        if (typeof extract[1] === 'string') {\r\n            var errorTxt = \"\".concat(this.line, \" \");\r\n            if (extract[1]) {\r\n                errorTxt += extract[1].slice(0, this.column) +\r\n                    stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') +\r\n                        extract[1].slice(this.column + 1), 'red'), 'inverse');\r\n            }\r\n            error.push(errorTxt);\r\n        }\r\n        if (typeof extract[2] === 'string') {\r\n            error.push(stylize(\"\".concat(this.line + 1, \" \").concat(extract[2]), 'grey'));\r\n        }\r\n        error = \"\".concat(error.join('\\n') + stylize('', 'reset'), \"\\n\");\r\n    }\r\n    message += stylize(\"\".concat(this.type, \"Error: \").concat(this.message), 'red');\r\n    if (this.filename) {\r\n        message += stylize(' in ', 'red') + this.filename;\r\n    }\r\n    if (this.line) {\r\n        message += stylize(\" on line \".concat(this.line, \", column \").concat(this.column + 1, \":\"), 'grey');\r\n    }\r\n    message += \"\\n\".concat(error);\r\n    if (this.callLine) {\r\n        message += \"\".concat(stylize('from ', 'red') + (this.filename || ''), \"/n\");\r\n        message += \"\".concat(stylize(this.callLine, 'grey'), \" \").concat(this.callExtract, \"/n\");\r\n    }\r\n    return message;\r\n};\r\nexports.default = LessError;\r\n//# sourceMappingURL=less-error.js.map"]}