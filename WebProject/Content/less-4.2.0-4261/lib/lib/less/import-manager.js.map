{"version":3,"file":"import-manager.js","sourceRoot":"","sources":["../../less/import-manager.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar contexts_1 = tslib_1.__importDefault(require(\"./contexts\"));\r\nvar parser_1 = tslib_1.__importDefault(require(\"./parser/parser\"));\r\nvar less_error_1 = tslib_1.__importDefault(require(\"./less-error\"));\r\nvar utils = tslib_1.__importStar(require(\"./utils\"));\r\nvar logger_1 = tslib_1.__importDefault(require(\"./logger\"));\r\nfunction default_1(environment) {\r\n    // FileInfo = {\r\n    //  'rewriteUrls' - option - whether to adjust URL's to be relative\r\n    //  'filename' - full resolved filename of current file\r\n    //  'rootpath' - path to append to normal URLs for this node\r\n    //  'currentDirectory' - path to the current file, absolute\r\n    //  'rootFilename' - filename of the base file\r\n    //  'entryPath' - absolute path to the entry file\r\n    //  'reference' - whether the file should not be output and only output parts that are referenced\r\n    var ImportManager = /** @class */ (function () {\r\n        function ImportManager(less, context, rootFileInfo) {\r\n            this.less = less;\r\n            this.rootFilename = rootFileInfo.filename;\r\n            this.paths = context.paths || []; // Search paths, when importing\r\n            this.contents = {}; // map - filename to contents of all the files\r\n            this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\r\n            this.mime = context.mime;\r\n            this.error = null;\r\n            this.context = context;\r\n            // Deprecated? Unused outside of here, could be useful.\r\n            this.queue = []; // Files which haven't been imported yet\r\n            this.files = {}; // Holds the imported parse trees.\r\n        }\r\n        /**\r\n         * Add an import to be imported\r\n         * @param path - the raw path\r\n         * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\r\n         * @param currentFileInfo - the current file info (used for instance to work out relative paths)\r\n         * @param importOptions - import options\r\n         * @param callback - callback for when it is imported\r\n         */\r\n        ImportManager.prototype.push = function (path, tryAppendExtension, currentFileInfo, importOptions, callback) {\r\n            var importManager = this, pluginLoader = this.context.pluginManager.Loader;\r\n            this.queue.push(path);\r\n            var fileParsedFunc = function (e, root, fullPath) {\r\n                importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\r\n                var importedEqualsRoot = fullPath === importManager.rootFilename;\r\n                if (importOptions.optional && e) {\r\n                    callback(null, { rules: [] }, false, null);\r\n                    logger_1.default.info(\"The file \".concat(fullPath, \" was skipped because it was not found and the import was marked optional.\"));\r\n                }\r\n                else {\r\n                    // Inline imports aren't cached here.\r\n                    // If we start to cache them, please make sure they won't conflict with non-inline imports of the\r\n                    // same name as they used to do before this comment and the condition below have been added.\r\n                    if (!importManager.files[fullPath] && !importOptions.inline) {\r\n                        importManager.files[fullPath] = { root: root, options: importOptions };\r\n                    }\r\n                    if (e && !importManager.error) {\r\n                        importManager.error = e;\r\n                    }\r\n                    callback(e, root, importedEqualsRoot, fullPath);\r\n                }\r\n            };\r\n            var newFileInfo = {\r\n                rewriteUrls: this.context.rewriteUrls,\r\n                entryPath: currentFileInfo.entryPath,\r\n                rootpath: currentFileInfo.rootpath,\r\n                rootFilename: currentFileInfo.rootFilename\r\n            };\r\n            var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\r\n            if (!fileManager) {\r\n                fileParsedFunc({ message: \"Could not find a file-manager for \".concat(path) });\r\n                return;\r\n            }\r\n            var loadFileCallback = function (loadedFile) {\r\n                var plugin;\r\n                var resolvedFilename = loadedFile.filename;\r\n                var contents = loadedFile.contents.replace(/^\\uFEFF/, '');\r\n                // Pass on an updated rootpath if path of imported file is relative and file\r\n                // is in a (sub|sup) directory\r\n                //\r\n                // Examples:\r\n                // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\r\n                //   then rootpath should become 'less/module/nav/'\r\n                // - If path of imported file is '../mixins.less' and rootpath is 'less/',\r\n                //   then rootpath should become 'less/../'\r\n                newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\r\n                if (newFileInfo.rewriteUrls) {\r\n                    newFileInfo.rootpath = fileManager.join((importManager.context.rootpath || ''), fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\r\n                    if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\r\n                        newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\r\n                    }\r\n                }\r\n                newFileInfo.filename = resolvedFilename;\r\n                var newEnv = new contexts_1.default.Parse(importManager.context);\r\n                newEnv.processImports = false;\r\n                importManager.contents[resolvedFilename] = contents;\r\n                if (currentFileInfo.reference || importOptions.reference) {\r\n                    newFileInfo.reference = true;\r\n                }\r\n                if (importOptions.isPlugin) {\r\n                    plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\r\n                    if (plugin instanceof less_error_1.default) {\r\n                        fileParsedFunc(plugin, null, resolvedFilename);\r\n                    }\r\n                    else {\r\n                        fileParsedFunc(null, plugin, resolvedFilename);\r\n                    }\r\n                }\r\n                else if (importOptions.inline) {\r\n                    fileParsedFunc(null, contents, resolvedFilename);\r\n                }\r\n                else {\r\n                    // import (multiple) parse trees apparently get altered and can't be cached.\r\n                    // TODO: investigate why this is\r\n                    if (importManager.files[resolvedFilename]\r\n                        && !importManager.files[resolvedFilename].options.multiple\r\n                        && !importOptions.multiple) {\r\n                        fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\r\n                    }\r\n                    else {\r\n                        new parser_1.default(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\r\n                            fileParsedFunc(e, root, resolvedFilename);\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            var loadedFile;\r\n            var promise;\r\n            var context = utils.clone(this.context);\r\n            if (tryAppendExtension) {\r\n                context.ext = importOptions.isPlugin ? '.js' : '.less';\r\n            }\r\n            if (importOptions.isPlugin) {\r\n                context.mime = 'application/javascript';\r\n                if (context.syncImport) {\r\n                    loadedFile = pluginLoader.loadPluginSync(path, currentFileInfo.currentDirectory, context, environment, fileManager);\r\n                }\r\n                else {\r\n                    promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\r\n                }\r\n            }\r\n            else {\r\n                if (context.syncImport) {\r\n                    loadedFile = fileManager.loadFileSync(path, currentFileInfo.currentDirectory, context, environment);\r\n                }\r\n                else {\r\n                    promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment, function (err, loadedFile) {\r\n                        if (err) {\r\n                            fileParsedFunc(err);\r\n                        }\r\n                        else {\r\n                            loadFileCallback(loadedFile);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (loadedFile) {\r\n                if (!loadedFile.filename) {\r\n                    fileParsedFunc(loadedFile);\r\n                }\r\n                else {\r\n                    loadFileCallback(loadedFile);\r\n                }\r\n            }\r\n            else if (promise) {\r\n                promise.then(loadFileCallback, fileParsedFunc);\r\n            }\r\n        };\r\n        return ImportManager;\r\n    }());\r\n    return ImportManager;\r\n}\r\nexports.default = default_1;\r\n//# sourceMappingURL=import-manager.js.map"]}