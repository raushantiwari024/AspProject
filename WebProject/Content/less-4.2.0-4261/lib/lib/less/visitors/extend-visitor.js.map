{"version":3,"file":"extend-visitor.js","sourceRoot":"","sources":["../../../less/visitors/extend-visitor.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\n/* eslint-disable no-unused-vars */\r\n/**\r\n * @todo - Remove unused when JSDoc types are added for visitor methods\r\n */\r\nvar tree_1 = tslib_1.__importDefault(require(\"../tree\"));\r\nvar visitor_1 = tslib_1.__importDefault(require(\"./visitor\"));\r\nvar logger_1 = tslib_1.__importDefault(require(\"../logger\"));\r\nvar utils = tslib_1.__importStar(require(\"../utils\"));\r\n/* jshint loopfunc:true */\r\nvar ExtendFinderVisitor = /** @class */ (function () {\r\n    function ExtendFinderVisitor() {\r\n        this._visitor = new visitor_1.default(this);\r\n        this.contexts = [];\r\n        this.allExtendsStack = [[]];\r\n    }\r\n    ExtendFinderVisitor.prototype.run = function (root) {\r\n        root = this._visitor.visit(root);\r\n        root.allExtends = this.allExtendsStack[0];\r\n        return root;\r\n    };\r\n    ExtendFinderVisitor.prototype.visitDeclaration = function (declNode, visitArgs) {\r\n        visitArgs.visitDeeper = false;\r\n    };\r\n    ExtendFinderVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\r\n        visitArgs.visitDeeper = false;\r\n    };\r\n    ExtendFinderVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\r\n        if (rulesetNode.root) {\r\n            return;\r\n        }\r\n        var i;\r\n        var j;\r\n        var extend;\r\n        var allSelectorsExtendList = [];\r\n        var extendList;\r\n        // get &:extend(.a); rules which apply to all selectors in this ruleset\r\n        var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;\r\n        for (i = 0; i < ruleCnt; i++) {\r\n            if (rulesetNode.rules[i] instanceof tree_1.default.Extend) {\r\n                allSelectorsExtendList.push(rules[i]);\r\n                rulesetNode.extendOnEveryPath = true;\r\n            }\r\n        }\r\n        // now find every selector and apply the extends that apply to all extends\r\n        // and the ones which apply to an individual extend\r\n        var paths = rulesetNode.paths;\r\n        for (i = 0; i < paths.length; i++) {\r\n            var selectorPath = paths[i], selector = selectorPath[selectorPath.length - 1], selExtendList = selector.extendList;\r\n            extendList = selExtendList ? utils.copyArray(selExtendList).concat(allSelectorsExtendList)\r\n                : allSelectorsExtendList;\r\n            if (extendList) {\r\n                extendList = extendList.map(function (allSelectorsExtend) {\r\n                    return allSelectorsExtend.clone();\r\n                });\r\n            }\r\n            for (j = 0; j < extendList.length; j++) {\r\n                this.foundExtends = true;\r\n                extend = extendList[j];\r\n                extend.findSelfSelectors(selectorPath);\r\n                extend.ruleset = rulesetNode;\r\n                if (j === 0) {\r\n                    extend.firstExtendOnThisSelectorPath = true;\r\n                }\r\n                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\r\n            }\r\n        }\r\n        this.contexts.push(rulesetNode.selectors);\r\n    };\r\n    ExtendFinderVisitor.prototype.visitRulesetOut = function (rulesetNode) {\r\n        if (!rulesetNode.root) {\r\n            this.contexts.length = this.contexts.length - 1;\r\n        }\r\n    };\r\n    ExtendFinderVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\r\n        mediaNode.allExtends = [];\r\n        this.allExtendsStack.push(mediaNode.allExtends);\r\n    };\r\n    ExtendFinderVisitor.prototype.visitMediaOut = function (mediaNode) {\r\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\r\n    };\r\n    ExtendFinderVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\r\n        atRuleNode.allExtends = [];\r\n        this.allExtendsStack.push(atRuleNode.allExtends);\r\n    };\r\n    ExtendFinderVisitor.prototype.visitAtRuleOut = function (atRuleNode) {\r\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\r\n    };\r\n    return ExtendFinderVisitor;\r\n}());\r\nvar ProcessExtendsVisitor = /** @class */ (function () {\r\n    function ProcessExtendsVisitor() {\r\n        this._visitor = new visitor_1.default(this);\r\n    }\r\n    ProcessExtendsVisitor.prototype.run = function (root) {\r\n        var extendFinder = new ExtendFinderVisitor();\r\n        this.extendIndices = {};\r\n        extendFinder.run(root);\r\n        if (!extendFinder.foundExtends) {\r\n            return root;\r\n        }\r\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\r\n        this.allExtendsStack = [root.allExtends];\r\n        var newRoot = this._visitor.visit(root);\r\n        this.checkExtendsForNonMatched(root.allExtends);\r\n        return newRoot;\r\n    };\r\n    ProcessExtendsVisitor.prototype.checkExtendsForNonMatched = function (extendList) {\r\n        var indices = this.extendIndices;\r\n        extendList.filter(function (extend) {\r\n            return !extend.hasFoundMatches && extend.parent_ids.length == 1;\r\n        }).forEach(function (extend) {\r\n            var selector = '_unknown_';\r\n            try {\r\n                selector = extend.selector.toCSS({});\r\n            }\r\n            catch (_) { }\r\n            if (!indices[\"\".concat(extend.index, \" \").concat(selector)]) {\r\n                indices[\"\".concat(extend.index, \" \").concat(selector)] = true;\r\n                logger_1.default.warn(\"extend '\".concat(selector, \"' has no matches\"));\r\n            }\r\n        });\r\n    };\r\n    ProcessExtendsVisitor.prototype.doExtendChaining = function (extendsList, extendsListTarget, iterationCount) {\r\n        //\r\n        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\r\n        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\r\n        // this means this new extend can then go and alter other extends\r\n        //\r\n        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\r\n        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\r\n        // processed if we look at each selector at a time, as is done in visitRuleset\r\n        var extendIndex;\r\n        var targetExtendIndex;\r\n        var matches;\r\n        var extendsToAdd = [];\r\n        var newSelector;\r\n        var extendVisitor = this;\r\n        var selectorPath;\r\n        var extend;\r\n        var targetExtend;\r\n        var newExtend;\r\n        iterationCount = iterationCount || 0;\r\n        // loop through comparing every extend with every target extend.\r\n        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\r\n        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\r\n        // and the second is the target.\r\n        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\r\n        // case when processing media queries\r\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\r\n            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\r\n                extend = extendsList[extendIndex];\r\n                targetExtend = extendsListTarget[targetExtendIndex];\r\n                // look for circular references\r\n                if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {\r\n                    continue;\r\n                }\r\n                // find a match in the target extends self selector (the bit before :extend)\r\n                selectorPath = [targetExtend.selfSelectors[0]];\r\n                matches = extendVisitor.findMatch(extend, selectorPath);\r\n                if (matches.length) {\r\n                    extend.hasFoundMatches = true;\r\n                    // we found a match, so for each self selector..\r\n                    extend.selfSelectors.forEach(function (selfSelector) {\r\n                        var info = targetExtend.visibilityInfo();\r\n                        // process the extend as usual\r\n                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\r\n                        // but now we create a new extend from it\r\n                        newExtend = new (tree_1.default.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\r\n                        newExtend.selfSelectors = newSelector;\r\n                        // add the extend onto the list of extends for that selector\r\n                        newSelector[newSelector.length - 1].extendList = [newExtend];\r\n                        // record that we need to add it.\r\n                        extendsToAdd.push(newExtend);\r\n                        newExtend.ruleset = targetExtend.ruleset;\r\n                        // remember its parents for circular references\r\n                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\r\n                        // only process the selector once.. if we have :extend(.a,.b) then multiple\r\n                        // extends will look at the same selector path, so when extending\r\n                        // we know that any others will be duplicates in terms of what is added to the css\r\n                        if (targetExtend.firstExtendOnThisSelectorPath) {\r\n                            newExtend.firstExtendOnThisSelectorPath = true;\r\n                            targetExtend.ruleset.paths.push(newSelector);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (extendsToAdd.length) {\r\n            // try to detect circular references to stop a stack overflow.\r\n            // may no longer be needed.\r\n            this.extendChainCount++;\r\n            if (iterationCount > 100) {\r\n                var selectorOne = '{unable to calculate}';\r\n                var selectorTwo = '{unable to calculate}';\r\n                try {\r\n                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\r\n                    selectorTwo = extendsToAdd[0].selector.toCSS();\r\n                }\r\n                catch (e) { }\r\n                throw { message: \"extend circular reference detected. One of the circular extends is currently:\".concat(selectorOne, \":extend(\").concat(selectorTwo, \")\") };\r\n            }\r\n            // now process the new extends on the existing rules so that we can handle a extending b extending c extending\r\n            // d extending e...\r\n            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\r\n        }\r\n        else {\r\n            return extendsToAdd;\r\n        }\r\n    };\r\n    ProcessExtendsVisitor.prototype.visitDeclaration = function (ruleNode, visitArgs) {\r\n        visitArgs.visitDeeper = false;\r\n    };\r\n    ProcessExtendsVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\r\n        visitArgs.visitDeeper = false;\r\n    };\r\n    ProcessExtendsVisitor.prototype.visitSelector = function (selectorNode, visitArgs) {\r\n        visitArgs.visitDeeper = false;\r\n    };\r\n    ProcessExtendsVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\r\n        if (rulesetNode.root) {\r\n            return;\r\n        }\r\n        var matches;\r\n        var pathIndex;\r\n        var extendIndex;\r\n        var allExtends = this.allExtendsStack[this.allExtendsStack.length - 1];\r\n        var selectorsToAdd = [];\r\n        var extendVisitor = this;\r\n        var selectorPath;\r\n        // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\r\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\r\n            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\r\n                selectorPath = rulesetNode.paths[pathIndex];\r\n                // extending extends happens initially, before the main pass\r\n                if (rulesetNode.extendOnEveryPath) {\r\n                    continue;\r\n                }\r\n                var extendList = selectorPath[selectorPath.length - 1].extendList;\r\n                if (extendList && extendList.length) {\r\n                    continue;\r\n                }\r\n                matches = this.findMatch(allExtends[extendIndex], selectorPath);\r\n                if (matches.length) {\r\n                    allExtends[extendIndex].hasFoundMatches = true;\r\n                    allExtends[extendIndex].selfSelectors.forEach(function (selfSelector) {\r\n                        var extendedSelectors;\r\n                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\r\n                        selectorsToAdd.push(extendedSelectors);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\r\n    };\r\n    ProcessExtendsVisitor.prototype.findMatch = function (extend, haystackSelectorPath) {\r\n        //\r\n        // look through the haystack selector path to try and find the needle - extend.selector\r\n        // returns an array of selector matches that can then be replaced\r\n        //\r\n        var haystackSelectorIndex;\r\n        var hackstackSelector;\r\n        var hackstackElementIndex;\r\n        var haystackElement;\r\n        var targetCombinator;\r\n        var i;\r\n        var extendVisitor = this;\r\n        var needleElements = extend.selector.elements;\r\n        var potentialMatches = [];\r\n        var potentialMatch;\r\n        var matches = [];\r\n        // loop through the haystack elements\r\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\r\n            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\r\n            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\r\n                haystackElement = hackstackSelector.elements[hackstackElementIndex];\r\n                // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\r\n                if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\r\n                    potentialMatches.push({ pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\r\n                        initialCombinator: haystackElement.combinator });\r\n                }\r\n                for (i = 0; i < potentialMatches.length; i++) {\r\n                    potentialMatch = potentialMatches[i];\r\n                    // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\r\n                    // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\r\n                    // work out what the resulting combinator will be\r\n                    targetCombinator = haystackElement.combinator.value;\r\n                    if (targetCombinator === '' && hackstackElementIndex === 0) {\r\n                        targetCombinator = ' ';\r\n                    }\r\n                    // if we don't match, null our match to indicate failure\r\n                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\r\n                        (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\r\n                        potentialMatch = null;\r\n                    }\r\n                    else {\r\n                        potentialMatch.matched++;\r\n                    }\r\n                    // if we are still valid and have finished, test whether we have elements after and whether these are allowed\r\n                    if (potentialMatch) {\r\n                        potentialMatch.finished = potentialMatch.matched === needleElements.length;\r\n                        if (potentialMatch.finished &&\r\n                            (!extend.allowAfter &&\r\n                                (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\r\n                            potentialMatch = null;\r\n                        }\r\n                    }\r\n                    // if null we remove, if not, we are still valid, so either push as a valid match or continue\r\n                    if (potentialMatch) {\r\n                        if (potentialMatch.finished) {\r\n                            potentialMatch.length = needleElements.length;\r\n                            potentialMatch.endPathIndex = haystackSelectorIndex;\r\n                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\r\n                            potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\r\n                            matches.push(potentialMatch);\r\n                        }\r\n                    }\r\n                    else {\r\n                        potentialMatches.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return matches;\r\n    };\r\n    ProcessExtendsVisitor.prototype.isElementValuesEqual = function (elementValue1, elementValue2) {\r\n        if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\r\n            return elementValue1 === elementValue2;\r\n        }\r\n        if (elementValue1 instanceof tree_1.default.Attribute) {\r\n            if (elementValue1.op !== elementValue2.op) {\r\n                return false;\r\n            }\r\n            if (elementValue1.key.length !== elementValue2.key.length) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < elementValue1.key.length; ++i) {\r\n                if (elementValue1.key[i] !== elementValue2.key[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (!elementValue1.value || !elementValue2.value) {\r\n                if (elementValue1.value || elementValue2.value) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n            elementValue1 = elementValue1.value.value || elementValue1.value;\r\n            elementValue2 = elementValue2.value.value || elementValue2.value;\r\n            return elementValue1 === elementValue2;\r\n        }\r\n        elementValue1 = elementValue1.value;\r\n        elementValue2 = elementValue2.value;\r\n        if (elementValue1 instanceof tree_1.default.Selector) {\r\n            if (!(elementValue2 instanceof tree_1.default.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < elementValue1.elements.length; i++) {\r\n                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\r\n                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\r\n                        return false;\r\n                    }\r\n                }\r\n                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ProcessExtendsVisitor.prototype.extendSelector = function (matches, selectorPath, replacementSelector, isVisible) {\r\n        // for a set of matches, replace each match with the replacement selector\r\n        var currentSelectorPathIndex = 0, currentSelectorPathElementIndex = 0, path = [], matchIndex, selector, firstElement, match, newElements;\r\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\r\n            match = matches[matchIndex];\r\n            selector = selectorPath[match.pathIndex];\r\n            firstElement = new tree_1.default.Element(match.initialCombinator, replacementSelector.elements[0].value, replacementSelector.elements[0].isVariable, replacementSelector.elements[0].getIndex(), replacementSelector.elements[0].fileInfo());\r\n            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\r\n                path[path.length - 1].elements = path[path.length - 1]\r\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\r\n                currentSelectorPathElementIndex = 0;\r\n                currentSelectorPathIndex++;\r\n            }\r\n            newElements = selector.elements\r\n                .slice(currentSelectorPathElementIndex, match.index)\r\n                .concat([firstElement])\r\n                .concat(replacementSelector.elements.slice(1));\r\n            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\r\n                path[path.length - 1].elements =\r\n                    path[path.length - 1].elements.concat(newElements);\r\n            }\r\n            else {\r\n                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\r\n                path.push(new tree_1.default.Selector(newElements));\r\n            }\r\n            currentSelectorPathIndex = match.endPathIndex;\r\n            currentSelectorPathElementIndex = match.endPathElementIndex;\r\n            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\r\n                currentSelectorPathElementIndex = 0;\r\n                currentSelectorPathIndex++;\r\n            }\r\n        }\r\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\r\n            path[path.length - 1].elements = path[path.length - 1]\r\n                .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\r\n            currentSelectorPathIndex++;\r\n        }\r\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\r\n        path = path.map(function (currentValue) {\r\n            // we can re-use elements here, because the visibility property matters only for selectors\r\n            var derived = currentValue.createDerived(currentValue.elements);\r\n            if (isVisible) {\r\n                derived.ensureVisibility();\r\n            }\r\n            else {\r\n                derived.ensureInvisibility();\r\n            }\r\n            return derived;\r\n        });\r\n        return path;\r\n    };\r\n    ProcessExtendsVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\r\n        var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\r\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\r\n        this.allExtendsStack.push(newAllExtends);\r\n    };\r\n    ProcessExtendsVisitor.prototype.visitMediaOut = function (mediaNode) {\r\n        var lastIndex = this.allExtendsStack.length - 1;\r\n        this.allExtendsStack.length = lastIndex;\r\n    };\r\n    ProcessExtendsVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\r\n        var newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\r\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\r\n        this.allExtendsStack.push(newAllExtends);\r\n    };\r\n    ProcessExtendsVisitor.prototype.visitAtRuleOut = function (atRuleNode) {\r\n        var lastIndex = this.allExtendsStack.length - 1;\r\n        this.allExtendsStack.length = lastIndex;\r\n    };\r\n    return ProcessExtendsVisitor;\r\n}());\r\nexports.default = ProcessExtendsVisitor;\r\n//# sourceMappingURL=extend-visitor.js.map"]}