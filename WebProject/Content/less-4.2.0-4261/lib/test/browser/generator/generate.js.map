{"version":3,"file":"generate.js","sourceRoot":"","sources":["../../../../test/browser/generator/generate.js"],"names":[],"mappings":"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","sourcesContent":["const template = require('./template')\nlet config\nconst fs = require('fs-extra')\nconst path = require('path')\nconst globby = require('globby')\nconst { runner } = require('mocha-headless-chrome')\n\n\nif (process.argv[2]) {\n    config = require(`./${process.argv[2]}.config`)\n} else {\n    config = require('./runner.config')\n}\n\n/**\n * Generate templates and run tests\n */\nconst tests = []\nconst cwd = process.cwd()\nconst tmpDir = path.join(cwd, 'tmp', 'browser')\nfs.ensureDirSync(tmpDir)\nfs.copySync(path.join(cwd, 'test', 'browser', 'common.js'), path.join(tmpDir, 'common.js'))\n\nlet numTests = 0\nlet passedTests = 0\nlet failedTests = 0\n\n/** Will run the runners in a series */\nfunction runSerial(tasks) {\n    var result = Promise.resolve()\n    start = Date.now()\n    tasks.forEach(task => {\n        result = result.then(result => {\n            if (result && result.result && result.result.stats) {\n                const stats = result.result.stats\n                numTests += stats.tests\n                passedTests += stats.passes\n                failedTests += stats.failures\n            }\n            return task()\n        }, err => {\n            console.log(err)\n            failedTests += 1\n        })\n    })\n    return result\n}\n\nObject.entries(config).forEach(entry => {\n    const test = entry[1]\n    const paths = globby.sync(test.src)\n    const templateString = template(paths, test.options.helpers, test.options.specs)\n    fs.writeFileSync(path.join(cwd, test.options.outfile), templateString)\n    tests.push(() => {\n        const file = 'http://localhost:8081/packages/less/' + test.options.outfile\n        console.log(file)\n        return runner({\n            file,\n            timeout: 3500,\n            args: ['disable-web-security']\n        })\n    })\n})\n\nmodule.exports = () => runSerial(tests).then(() => {\n    if (failedTests > 0) {\n        process.stderr.write(failedTests + ' Failed, ' + passedTests + ' passed\\n');\n    } else {\n        process.stdout.write('All Passed ' + passedTests + ' run\\n');\n    }\n    if (failedTests) {\n        process.on('exit', function() { process.reallyExit(1); });\n    }\n    process.exit()\n}, err => {\n    process.stderr.write(err.message);\n    process.exit()\n})\n"]}