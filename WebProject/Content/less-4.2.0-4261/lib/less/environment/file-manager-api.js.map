{"version":3,"file":"file-manager-api.js","sourceRoot":"","sources":["../../../src/less/environment/file-manager-api.ts"],"names":[],"mappings":"","sourcesContent":["import type { Environment } from './environment-api'\r\n\r\nexport interface FileManager {\r\n    /**\r\n     * Given the full path to a file, return the path component\r\n     * Provided by AbstractFileManager\r\n     */\r\n    getPath(filename: string): string\r\n    /**\r\n     * Append a .less extension if appropriate. Only called if less thinks one could be added.\r\n     * Provided by AbstractFileManager\r\n     */\r\n    tryAppendLessExtension(filename: string): string\r\n    /**\r\n     * Whether the rootpath should be converted to be absolute.\r\n     * The browser ovverides this to return true because urls must be absolute.\r\n     * Provided by AbstractFileManager (returns false)\r\n     */\r\n    alwaysMakePathsAbsolute(): boolean\r\n    /**\r\n     * Returns whether a path is absolute\r\n     * Provided by AbstractFileManager\r\n     */\r\n    isPathAbsolute(path: string): boolean\r\n    /**\r\n     * joins together 2 paths\r\n     * Provided by AbstractFileManager\r\n     */\r\n    join(basePath: string, laterPath: string): string\r\n    /**\r\n     * Returns the difference between 2 paths\r\n     * E.g. url = a/ baseUrl = a/b/ returns ../\r\n     * url = a/b/ baseUrl = a/ returns b/\r\n     * Provided by AbstractFileManager\r\n     */\r\n    pathDiff(url: string, baseUrl: string): string\r\n    /**\r\n     * Returns whether this file manager supports this file for syncronous file retrieval\r\n     * If true is returned, loadFileSync will then be called with the file.\r\n     * Provided by AbstractFileManager (returns false)\r\n     * \r\n     * @todo - Narrow Options type\r\n     */\r\n    supportsSync(\r\n        filename: string,\r\n        currentDirectory: string,\r\n        options: Record<string, any>,\r\n        environment: Environment\r\n    ): boolean\r\n    /**\r\n     * If file manager supports async file retrieval for this file type\r\n     */\r\n    supports(\r\n        filename: string,\r\n        currentDirectory: string,\r\n        options: Record<string, any>,\r\n        environment: Environment\r\n    ): boolean\r\n    /**\r\n     * Loads a file asynchronously.\r\n     */\r\n    loadFile(\r\n        filename: string,\r\n        currentDirectory: string,\r\n        options: Record<string, any>,\r\n        environment: Environment\r\n    ): Promise<{ filename: string, contents: string }>\r\n    /**\r\n     * Loads a file synchronously. Expects an immediate return with an object\r\n     */\r\n    loadFileSync(\r\n        filename: string,\r\n        currentDirectory: string,\r\n        options: Record<string, any>,\r\n        environment: Environment\r\n    ): { error?: unknown, filename: string, contents: string }\r\n}\r\n"]}